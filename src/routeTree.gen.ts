/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutUserImport } from './routes/_layout/user'
import { Route as LayoutSignupImport } from './routes/_layout/signup'
import { Route as LayoutLoginImport } from './routes/_layout/login'
import { Route as LayoutHomeImport } from './routes/_layout/home'
import { Route as LayoutCreateImport } from './routes/_layout/create'
import { Route as LayoutAboutImport } from './routes/_layout/about'
import { Route as LayoutPostPostSerIdImport } from './routes/_layout/post.$postSerId'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUserRoute = LayoutUserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSignupRoute = LayoutSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLoginRoute = LayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHomeRoute = LayoutHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCreateRoute = LayoutCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPostPostSerIdRoute = LayoutPostPostSerIdImport.update({
  id: '/post/$postSerId',
  path: '/post/$postSerId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/create': {
      id: '/_layout/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof LayoutCreateImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/home': {
      id: '/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayoutHomeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LayoutLoginImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/signup': {
      id: '/_layout/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof LayoutSignupImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/user': {
      id: '/_layout/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof LayoutUserImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/post/$postSerId': {
      id: '/_layout/post/$postSerId'
      path: '/post/$postSerId'
      fullPath: '/post/$postSerId'
      preLoaderRoute: typeof LayoutPostPostSerIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAboutRoute: typeof LayoutAboutRoute
  LayoutCreateRoute: typeof LayoutCreateRoute
  LayoutHomeRoute: typeof LayoutHomeRoute
  LayoutLoginRoute: typeof LayoutLoginRoute
  LayoutSignupRoute: typeof LayoutSignupRoute
  LayoutUserRoute: typeof LayoutUserRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutPostPostSerIdRoute: typeof LayoutPostPostSerIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutCreateRoute: LayoutCreateRoute,
  LayoutHomeRoute: LayoutHomeRoute,
  LayoutLoginRoute: LayoutLoginRoute,
  LayoutSignupRoute: LayoutSignupRoute,
  LayoutUserRoute: LayoutUserRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutPostPostSerIdRoute: LayoutPostPostSerIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/about': typeof LayoutAboutRoute
  '/create': typeof LayoutCreateRoute
  '/home': typeof LayoutHomeRoute
  '/login': typeof LayoutLoginRoute
  '/signup': typeof LayoutSignupRoute
  '/user': typeof LayoutUserRoute
  '/': typeof LayoutIndexRoute
  '/post/$postSerId': typeof LayoutPostPostSerIdRoute
}

export interface FileRoutesByTo {
  '/about': typeof LayoutAboutRoute
  '/create': typeof LayoutCreateRoute
  '/home': typeof LayoutHomeRoute
  '/login': typeof LayoutLoginRoute
  '/signup': typeof LayoutSignupRoute
  '/user': typeof LayoutUserRoute
  '/': typeof LayoutIndexRoute
  '/post/$postSerId': typeof LayoutPostPostSerIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/about': typeof LayoutAboutRoute
  '/_layout/create': typeof LayoutCreateRoute
  '/_layout/home': typeof LayoutHomeRoute
  '/_layout/login': typeof LayoutLoginRoute
  '/_layout/signup': typeof LayoutSignupRoute
  '/_layout/user': typeof LayoutUserRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/post/$postSerId': typeof LayoutPostPostSerIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/create'
    | '/home'
    | '/login'
    | '/signup'
    | '/user'
    | '/'
    | '/post/$postSerId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/create'
    | '/home'
    | '/login'
    | '/signup'
    | '/user'
    | '/'
    | '/post/$postSerId'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/about'
    | '/_layout/create'
    | '/_layout/home'
    | '/_layout/login'
    | '/_layout/signup'
    | '/_layout/user'
    | '/_layout/'
    | '/_layout/post/$postSerId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/about",
        "/_layout/create",
        "/_layout/home",
        "/_layout/login",
        "/_layout/signup",
        "/_layout/user",
        "/_layout/",
        "/_layout/post/$postSerId"
      ]
    },
    "/_layout/about": {
      "filePath": "_layout/about.tsx",
      "parent": "/_layout"
    },
    "/_layout/create": {
      "filePath": "_layout/create.tsx",
      "parent": "/_layout"
    },
    "/_layout/home": {
      "filePath": "_layout/home.tsx",
      "parent": "/_layout"
    },
    "/_layout/login": {
      "filePath": "_layout/login.tsx",
      "parent": "/_layout"
    },
    "/_layout/signup": {
      "filePath": "_layout/signup.tsx",
      "parent": "/_layout"
    },
    "/_layout/user": {
      "filePath": "_layout/user.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/post/$postSerId": {
      "filePath": "_layout/post.$postSerId.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
